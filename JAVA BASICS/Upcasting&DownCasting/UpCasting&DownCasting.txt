In Java, casting is the process of converting one data type into another. Casting is necessary when assigning a value of one data type to a variable of another data type or when converting between reference types in the case of objects.

Primitive Data Type Casting:
Let's look at an example of casting between primitive data types:

java
Copy code
public class PrimitiveCastingExample {
    public static void main(String[] args) {
        int intValue = 10;
        double doubleValue = 20.5;

        // Implicit casting (Widening Conversion): int to double
        doubleValue = intValue;
        System.out.println("Implicit casting: " + doubleValue); // Output: 10.0

        // Explicit casting (Narrowing Conversion): double to int
        intValue = (int) doubleValue;
        System.out.println("Explicit casting: " + intValue); // Output: 20
    }
}
In the example above, we perform implicit casting from int to double, and explicit casting from double to int. Implicit casting (widening conversion) happens automatically when there is no loss of data, while explicit casting (narrowing conversion) requires a type cast and may lead to data loss.

Object Reference Casting (Upcasting and Downcasting):
In Java, upcasting and downcasting are used when working with objects and their class hierarchies. Upcasting involves converting an object of a subclass to a reference of its superclass, while downcasting is the opposite â€“ converting an object of the superclass to a reference of its subclass.

java
Copy code
class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }

    void playFetch() {
        System.out.println("Dog is playing fetch");
    }
}

public class ObjectCastingExample {
    public static void main(String[] args) {
        // Upcasting: Dog object treated as Animal reference
        Animal animal = new Dog();
        animal.makeSound(); // Output: Dog barks

        // Downcasting: Animal object treated as Dog reference
        Dog dog = (Dog) animal;
        dog.makeSound();    // Output: Dog barks
        dog.playFetch();    // Output: Dog is playing fetch

        // However, be cautious with downcasting
        // If the object is not an instance of the subclass, it will throw a ClassCastException
        // Animal animal2 = new Animal();
        // Dog dog2 = (Dog) animal2; // Error: java.lang.ClassCastException
    }
}
In the example above, we have a base class Animal and a subclass Dog. We perform upcasting when we create an object of the Dog class and assign it to a reference of the Animal class. This allows us to access the overridden method makeSound() from the Dog class through the Animal reference.

Next, we perform downcasting when we explicitly cast the Animal object back to the Dog reference. This enables us to access both the overridden method makeSound() and the method playFetch() that are unique to the Dog class.

However, downcasting requires caution. If the object is not an instance of the subclass (e.g., when the Animal object is created directly), attempting to downcast will result in a ClassCastException.

Overall, understanding casting is crucial for handling data type conversions and working with class hierarchies in Java.